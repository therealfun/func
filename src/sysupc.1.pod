=pod

=head1 NAME

sysupc - rebuild the packages that need to be upgraded, in a temporary container

=head1 SYNOPSIS

sysupc

=head1 DESCRIPTION

B<sysupc> runs the following commands in a temporary container, as a non-root user, using the real  root (F</>) as a read-only layer:

	oprt-update

or:

	prt-get sysup
	revdep | xargs --no-run-if-empty prt-get update -fr

if B<oprt> is not installed.

The new sources and built packages are saved to the host pkgmk directories (B<$PKGMK_SOURCE_DIR> and B<$PKGMK_PACKAGE_DIR>).

It was tested with B<pkgmk> configured with shared directories. If started by the root user (to have write access to F</usr/ports>), it might work with the default settings of B<pkgmk> too.

=head1 EXAMPLES

Build in container and upgrade your system (notice the missing I<-fr>).

	sysupc
	prt-get sysup
	revdep | xargs --no-run-if-empty prt-get update

Test the system upgrade, without touching the current source or package directories (only works if B<func> uses namespaces):

	. /etc/pkgmk.conf
	export FUNC_BIND_RO="$PKGMK_SOURCE_DIR $PKGMK_PACKAGE_DIR"
	sysupc

Use the B<proot> backend, to workaround footprint mismatches with packages setting the setuid flags on some files:

	FUNC_PROOT=1 sysupc

Use automatic builds (fallback to the slower and safer B<proot> backend on errors):

	# add ports update in your root crontab @ 23pm
	sudo crontab - <(sudo crontab -l; echo "0 23 * * * ports -u")

	# add automatic builds in your non-root user crontab at 0am
	crontab - <(crontab -l; echo "0 0 * * * sysupc || FUNC_PROOT=1 sysupc")

In the morning, with the coffee next to the keyboard, read the emails sent by cron, execute C<prt-get diff> and pick your ports. Or go wild with C<prt-get sysup>.

=head1 ENVIRONMENT

=over 4

=item B<REVDEP_OPTS> (default: C<-i libreoffice>)

The options used with the B<revdep> command.

=back

=head1 SEE ALSO

func(1), revdep(1), oprt(1), prt-get(8)

=head1 COPYRIGHT AND LICENSE

Public domain

=cut
