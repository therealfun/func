=pod

=head1 NAME

func - fun tools to build ports in temporary containers

=head1 SYNOPSIS

func tool...

=head1 EXAMPLES

Create a file in a temporary container based on the real root (F</>):

	func clone / auto chroot "touch /xxx; ls -l /"
	ls -l /

Create and configure a container in F</var/cache/func-root>, and pack it for docker:

	sudo func create auto configure auto upgrade auto clean auto pack auto

Or in any other directory:

	sudo func create /here configure auto upgrade auto clean auto pack auto

Create and configure a container in /my-chroot:

	sudo func create /my-chroot configure auto

Generic (as root or non-root user) change a file in temporary container, based on F</my-chroot>:

	func clone /my-chroot auto chroot cat /etc/profile
	func clone /my-chroot auto chroot "touch /xxx; ls -l /"
	ls -l /my-chroot/

Mount the local ports (F</etc/ports>, F</usr/ports>) too:

	func clone /my-chroot auto ports chroot ls -l /etc/ports

Get a shell in F</my-chroot>, with the current directory mounted as I</home/u/$cwd>:

	func clone /my-chroot auto chroot bash

Get a shell in a temporary root (F</>):

	func clone / auto chroot bash

Same, but keep the changes in F</tmp/xxx>, to reuse the session:

	func clone / /tmp/xxx chroot bash

Build the port from the current directory:

	func clone / auto chroot fakeroot pkgmk -d

Get a shell in order to test the port from the current directory:

	func clone auto auto ports pkgmk auto auto prt-get chroot bash

Build the port from the current directory, with all its dependencies, even if the port is not listed in F</etc/prt-get.conf>:

	func clone / auto ports pkgmk auto auto prt-get chroot prt-get depinst $(basename $PWD)

Use the B<proot> backend, to workaround footprint mismatches with packages setting the setuid flags on some files:

	cd /usr/ports/opt/dbus
	FUNC_PROOT=1 func clone / auto pkgmk auto auto chroot fakeroot pkgmk

Build a port and keep the resulting packages:

	func clone / auto pkgmk auto auto ports prt-get chroot bash <<EOF
		fakeroot prt-get depinst port
		revdep port
		prtverify .
		finddeps port
		findredundantdeps port
	EOF

See syspupc(1) and depinstc(1) for more practical examples.

=head1 DESCRIPTION

The B<func> program is a glue for all the I<func> tools. For example, the command:

	func clone / auto chroot ls -l /

it is a shortcut for:

	func-clone  / auto
	func-chroot ls -l /

meaning: clone the F</>, with an automatic management of a temporary writable directory, make an union with these two directories, chroot to the union and run C<"ls -l /">.

B<func> is a very simple bash script that locates a tool (its first argument) and execute it (passing it all the other arguments). The tool consumes its arguments, and use B<func> to execute the next tool.

=head1 TOOLS

=over 4

=item B<create-root> dir|auto (B<root user>)

Creates a chroot starting from the CRUX ISO hosted on the CRUX mirrors. All the core packages are I<installed> with C<pkgadd --root $dir...>.

Not needed if you use B<func> tools with the host root F</> only.

The F</var/cache/func-root> will be used as a destination directory if B<auto> is given as an argument.

The directory should be empty or missing.

=item B<create> dir|auto

Currently, it calls B<create-root>.

=item B<configure-root> dir|auto (B<root user>)

Configures or reconfigures a chroot: resolv.conf, localtime, localedef, pkgmk.conf, prt-get.conf, repositories (therealfun and all inactive), update /usr/ports, upgrade pkgutils, install ports (fakeroot, prt-utils, ccache and therealfun/oprt), enable ccache, rejmerge.

Not needed if you use B<func> tools with the host root F</> only.

The F</var/cache/func-root> will be used if B<auto> is given as an argument.

=item B<configure> dir|auto

Currently, it calls B<configure-root>.

=item B<upgrade-root> dir|auto (B<root user>)

Upgrades a chroot with:

	ports --update
	prt-get sysup --install-scripts
	revdep | xargs --no-run-if-empty prt-get update -fr --install-scripts

The F</var/cache/func-root> will be used if B<auto> is given as an argument.

=item B<upgrade> dir|auto

Currently, it calls B<upgrade-root>.

=item B<clean-root> dir|auto (B<root user>)

Removes the sources, the packages and the work dirs from pkgmk directories, and recreate the F</root> directory, as it might have F<.ccache> or other directories.

The F</var/cache/func-root> will be used if B<auto> is given as an argument.

=item B<clean> dir|auto

Currently, it calls B<clean-root>.

=item B<pack-root> dir|auto (B<root user>)

Makes an archive from the B<dir> directory (or F</var/cache/func-root> if B<auto> is used). Used to create an docker image.

=item B<pack> dir|auto

Currently, it calls B<pack-root>.

=item B<clone-unionfs> read_only_template_dir|auto writable_dir|auto

Uses unionfs-fuse(1) to make an union (with copy-on-write) with B<read_only_template_dir> and B<writable_dir>, exported under I<$FUNC_UNION_ROOT> directory.

If B<auto> is used for the first directory, B<$FUNC_ROOT> will be used if exists as a directory, or F</var/cache/func-root>, or F</>.

If B<auto> is used for the second directory, it will be created under the B<$FUNC_COW_BASE> directory, and deleted on exit.

Currently, this is configured to work only as a non-root user.

=item B<clone-overlayfs> read_only_template_dir|auto writable_dir|auto (B<root user>)

Same as B<clone-unionfs>, but works only for the root user.

=item B<clone> read_only_template_dir|auto writable_dir|auto

Calls B<clone-unionfs> or B<clone-overlayfs>, depending on the case.

=item B<chroot-classic> command... (B<root user>)

Runs C<chroot $FUNC_UNION_ROOT command...>.

Works only for the root user. It needs mount_namespaces(7), to make the mounts easier to reverse (should be enabled by default in kernel).

=item B<chroot-namespaces> command...

Same as B<chroot-classic>, but works for non-root users.

It needs mount_namespaces(7) (enabled by default in linux kernel) for C<mount --bind> and user_namespaces(7) for chroot(1).

=item B<chroot-proot> command...

Same as B<chroot-namespaces>, but it doesn't need special kernel support, just the proot(1) program. It is slower than B<chroot-namespaces> because it uses C<PROOT_NO_SECCOMP=1>.

=item B<chroot> command...

Calls B<chroot-classic>, B<chroot-namespaces> or B<chroot-proot>, depending on the use case.

=item B<pkgmk> none|auto|src_dir none|auto|pkg_dir

Controls the mounting of I<$PKGMK_SOURCE_DIR>, I<$PKGMK_PACKAGE_DIR> and I<$PKGMK_WORK_DIR> in container.

B<none> means it won't be mounted, B<auto> means it will be mounted to the corresponding host dir (unless is useless), while any other string will be considered a host directory. The I<$PKGMK_WORK_DIR> is considered auto (to speed-up the builds).

=item B<ports>

Mounts F</etc/ports>, F</usr/ports> and I<$HOME/.cache/pp> (if exists) in container.

=item B<ccache>

Mounts I<$CCACHE_DIR> in container.

=item B<oprt>

Mounts I<$HOME/.cache/oprt> in container.

=item B<prt-get>

Replaces I<sudo> with I<fakeroot> and adds F</home/u> as the first B<prtdir> (if FUNC_ROOT != /) in F</etc/prt-get.conf> (in container).

=back

=head1 ENVIRONMENT

=over 4

=item B<FUNC_ROOT> (default: F</var/cache/func-root>)

Should be set to F</> when building packages against the main system.

This variable is set by the B<clone> tools when B<auto> is the first argument.

=item B<FUNC_COW_BASE> (default: F<$HOME/tmp>)

The containers (B<FUNC_COW>) are created in this directory.

=item B<FUNC_COW> (default: F<$FUNC_COW_BASE/func.$pid.changes>)

The upper layer in the unionfs/overlayfs, holding the new/modified files.

If the default is used, the directory will be automatically cleared before and removed on exit.

=item B<FUNC_UNION_ROOT> (default: F</tmp/func.$pid>)

The union directory, merging the read-only B<FUNC_ROOT> and read/write B<FUNC_COW>.

=item B<FUNC_BIND>

List of space separated paths for extra bindings. Eg. C<$HOME/.ccache:/var/cache/ccache /var/cache/distfiles> will mount F<$HOME/.ccache> in I<$FUNC_UNION_ROOT/var/cache/ccache> and F</var/cache/distfiles> in I<$FUNC_UNION_ROOT/var/cache/distfiles>.

=item B<FUNC_BIND_RO>

List of space separated paths (destinations paths from B<$FUNC_BIND>) which should be read-only. Ignored with B<proot> method.

=back

=head1 COPYRIGHT AND LICENSE

Public domain

=cut
