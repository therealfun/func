#!/bin/bash

main() {
	local _USE_OPRT=0
	[[ "$(which oprt 2>/dev/null)" == "" ]] || _USE_OPRT=1 

	[[ -d $SHARED_SRC ]] || SHARED_SRC=auto

	local _FUNC=${BASH_SOURCE%/*}/func

	fill_ARGS_with_port_dirs "$@"

	local _TO_BUILD=()
	echo "Making the build list"
	readarray -t _TO_BUILD < <( print_build_order )
	echo "We have ${#_TO_BUILD[@]} packages to build"

	local _PORT_DIR
 	local _PKG_NO=1
	for _PORT_DIR in "${_TO_BUILD[@]}"; do
		( build_port "$_PORT_DIR" ) \
			|| fatal_error "port failed: $_PORT_DIR"
		_PKG_NO=$(( $_PKG_NO + 1 ))
	done
}

fatal_error() {
	printf "ERROR: %s\n" "$*" >&2
	exit 1
}

fill_ARGS_with_port_dirs() {
	local _A
	local _PORT_DIR

	for _A in ${@:-$PWD}; do
		get_port_dir "$(readlink -f "$_A")"			
		_ARGS+=( $_PORT_DIR )
	done
}

is_port_dir() {
	[[ -e "$1/Pkgfile" ]]
}

get_port_dir() {
	local _NAME=$1

	if is_port_dir "$_NAME"; then
		_PORT_DIR=$_NAME
	else
		if (( $_USE_OPRT == 1 )); then
			local _COLS=( $(oprt-collections "$_NAME") )
			_PORT_DIR="${_COLS[0]}/$_NAME"
		else
			_PORT_DIR="$(prt-get path "$_NAME")"
		fi
		is_port_dir "$_PORT_DIR" \
			|| fatal_error "Can't find port: $_NAME"
	fi

	_PORT_DIR="$(readlink -f "$_PORT_DIR")"
}

print_build_order() {
	declare -A _DEPENDS
	declare -A _DIRS
	local _ARG
	for _ARG in "${_ARGS[@]}"; do
		print_deptree "$_ARG" 1
	done	                       \
	| sort_based_on_level_and_path \
	| print_uniques
}

print_deptree() {
	local _PORT_DIR=$1
	local    _LEVEL=$2

	[[ ${_DEPENDS["$_PORT_DIR"]+defined} ]] \
		|| _DEPENDS["$_PORT_DIR"]="$(pkgfile_deps "$_PORT_DIR")"

	printf '%*s%s\n' $(( $_LEVEL * 2 )) "" "$_PORT_DIR"

	local _DEP
	for _DEP in ${_DEPENDS["$_PORT_DIR"]}; do
		[[ ${_DIRS["$_DEP"]+defined} ]] || {
			get_port_dir "$_DEP"
			_DIRS["$_DEP"]=$_PORT_DIR
		}
		print_deptree "${_DIRS["$_DEP"]}" $(( $_LEVEL + 1 ))
	done
}

pkgfile_deps() {
	local _PORT_DIR=$1

	if (( $_USE_OPRT == 1 )); then
		oprt-pkgfile-deps "$_PORT_DIR"
	else
		awk '(NF > 1) { print $2 }'      \
			FS="Depends on:"         \
			< "$_PORT_DIR/Pkgfile"   \
		| sed -e 's/,/ /g' -e 's/  / /g'
	fi
}

sort_based_on_level_and_path() {
	sed 's/  /0 /g'         \
		| sort          \
		| sed 's/0 //g'
}

print_uniques() {
	awk '{
		if ( ! seen[$1] ) {
			print $1
			seen[$1]=1
		}
	}'
}

build_port() {
	local _PORT_DIR=$1
	local     _PORT=${_PORT_DIR##*/}

	local _CONTINUE=0
	local     _STOP=1

	printf '======= %s [%d] @ %(%F %T)T\n' "$_PORT_DIR" "$_PKG_NO"

	cd -- "$_PORT_DIR" \
		|| return $_STOP

	setup_container "$_PORT_DIR"

	# Signing inside the container won't work when we use namespaces
	# and the (faked) root doesn't have access to the SEC_KEY
	# Eg. on a mounted fuse directory, like encfs.
	# Also, the signature file has to be created before the build
	# to avoid .md5sum creation (when it is not supported for this repo)
	[[ -e "$FUNC_COW/is_our_arg" ]] \
		&& make_port_signature

	[[ -d $SHARED_PKG ]] \
		|| SHARED_PKG=$(. /etc/pkgmk.conf; echo "$PKGMK_PACKAGE_DIR")

	# make sure we export variables from our environment
	# when started as FUNC_ROOT=... depinstc
	export FUNC_ROOT FUNC_COW FUNC_PROOT

	inject="$_FUNC clone auto auto ports pkgmk $SHARED_SRC $SHARED_PKG oprt prt-get ccache chroot"

	is_port_up_to_date || {
		install_port_in_container "$_PORT_DIR" || {
			FUNC_PROOT=1
			install_port_in_container "$_PORT_DIR"
		} || return $_STOP

		[[ -e "$FUNC_COW/is_our_arg" ]] && {
			make_port_signature # with the new footprint
			check_port "$_PORT" || {
				printf 'WARNING: %s has issues\n' "$_PORT"
				return $_STOP
			}
		}
	}

	make_pkg_signature
	rm --recursive --force "$FUNC_COW"
	return $_CONTINUE
}

setup_container() {
	local _PORT_DIR=$1
	local     _PORT=${_PORT_DIR##*/}

	FUNC_COW="$HOME/tmp/depinstc.$_PORT"

	[[ -d $FUNC_COW ]] \
		&& rm --recursive --force "$FUNC_COW"

	mkdir --parents "$FUNC_COW"

	[[ $FUNC_ROOT == / ]] \
		&& create_file_in_container "full_root"

	is_our_arg "$_PORT_DIR" \
		&& create_file_in_container "is_our_arg"
}

create_file_in_container() {
	local _FILE=$1

	touch "$FUNC_COW/$_FILE"
}

is_our_arg() {
	local _RE=" $1 "
	[[ " ${_ARGS[@]} " =~ $_RE ]]
}

is_port_up_to_date() {
	local _MATCH="^=======> Package '(.*)' is up to date\.\$"

	local _TEXT=$($inject pkgmk --up-to-date)
	[[ "$_TEXT" =~ $_MATCH ]]
}

make_port_signature() {
	[[ -e $SEC_KEY ]] || return

	(
		set -o xtrace
		pkgmk --download --update-signature --secret-key "$SEC_KEY"
	)
	sed "s,${SEC_KEY/.sec/.pub},$PUB_KEY," --in-place .signature
}

make_pkg_signature() {
	[[ -e $SEC_KEY ]]  || return
	is_port_up_to_date || return

	local _TARGET="$SHARED_PKG/${BASH_REMATCH[1]##*/}"
	local    _SIG="${_TARGET}.sig"

	[[ -e $_TARGET && -e $_SIG && $_SIG -nt $_TARGET ]] && return

	set -o pipefail

	sha256sum --tag "$_TARGET"                                      \
		| sed 's|^SHA256 (.*/\(.*\))\(.* = .*\)|SHA256 (\1)\2|' \
		| signify -S -e -x - -q -s "$SEC_KEY" -m -              \
		> "$_TARGET.tmp"

	(( $? == 0 )) && {
		sed "s,${SEC_KEY/.sec/.pub},$PUB_KEY," --in-place "$_TARGET.tmp"
		mv "$_TARGET.tmp" "$_SIG"
	}
}

install_port_in_container() {
	local _PORT_DIR=$1
	local     _PORT=${_PORT_DIR##*/}

	$inject bash < <(
		sed "s/^main \"\$@\"\$/container_build_port $_PORT/" \
			< $BASH_SOURCE
	) || return $?

	remove_dependent_packages

	return 0
}

container_build_port() {
	local _PORT=$1

	[[ -e /full_root ]] \
		&& container_disable_install_scripts

	container_make_dependent_list "$_PORT"

	local _CMD
	container_select_build_CMD "$_PORT"

	local ccache=$(which ccache 2>/dev/null)
	[[ $ccache == "" ]] && ccache=":"

	$ccache --zero-stats

	printf '%s\n' "$_CMD"

	$_CMD \
		|| exit 1

	$ccache --show-stats | grep "cache hit rate"

	exit 0
}

container_disable_install_scripts() {
	export OPRT_DONT_RUN_SCRIPTS=lilo_fails_installing_kernel
	ed -s /etc/prt-get.conf <<-EOF
		g/runscripts/d
		w
	EOF
}

container_make_dependent_list() {
	local _PORT=$1

	printf 'REBUILD: %s - %s\n' "$_PORT" "${BASH_REMATCH[1]}"

	if [[ -x "$(which oprt 2>/dev/null)" ]]; then
		export OPRT_DEPSEARCH_BASIC=only_installed_ports_depending_on_this
		oprt-depsearch "$_PORT" 2>/dev/null              \
				| awk '$1 == "Name:" {print $2}' \
				| sort -u
	else
		prt-get dependent --all "$_PORT"
	fi >/rebuild_for_dependents
}

container_select_build_CMD() {
	local _PORT=$1

	if [[ -x "$(which oprt 2>/dev/null)" ]]; then
		export OPRT_BUILD_WITH_FAKEROOT=needed_by_some_ports
		export OPRT_DONT_RUN_SCRIPTS=lilo_fails_installing_kernel
		export OPRT_DONT_ASK_SCRIPT=we_dont_run_scripts
		export OPRT_DONT_LOG=do_not_pollute_the_log_if_mounted
		export OPRT_DONT_DELAY_SCRIPT=not_on_real_system
		_CMD=oprt-depinst
		container_is_port_installed "$_PORT" \
			&& _CMD=oprt-reinstall
		[[ -e /is_our_arg ]] && {
			export OPRT_INSTALL_WITH_FORCE=do_not_care
			export OPRT_INSTALL_IGNORING_FOOTPRINT=not_footprinted_yet
		}
	else
		                           _CMD="prt-get depinst $_PORT"
		prt-get isinst "$_PORT" && _CMD="prt-get update  $_PORT"
		[[ -e /is_our_arg ]]    && _CMD+=" -if -fi"
	fi
}

container_is_port_installed() {
	local _PORT=$1

	pkginfo --installed | grep "^$_PORT " >/dev/null
}

remove_dependent_packages() {
	[[ -e "$FUNC_COW/rebuild_for_dependents" ]] || return

	local _DEPENDENTS _PKG _DEP

	readarray -t _DEPENDENTS < "$FUNC_COW/rebuild_for_dependents"

	for _DEP in "${_DEPENDENTS[@]}"; do
		for _PKG in $SHARED_PKG/$_DEP\#*; do
			[[ -e "$_PKG" ]] || continue

			printf 'DELETE %s\n' "$_PKG"

			rm -- "$_PKG"
		done
	done

	return 0
}

check_port() {
	local _PORT=$1

	$inject bash <<-EOF
	set -o errexit
	set -o xtrace
	pkgmk --update-footprint
	revdep "$_PORT"
	prtverify .
	finddeps "$_PORT"
	(findredundantdeps "$_PORT" || true) | tee /redundant
	[[ ! -s /redundant ]]
	EOF
}

main "$@"
